<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2020.1.2">
  <Settings>
    <Param name="Audio latency priority" updates="None" val="use prefs" valType="str"/>
    <Param name="Audio lib" updates="None" val="use prefs" valType="str"/>
    <Param name="Completed URL" updates="None" val="" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'participant': '', 'session': '001'}" valType="code"/>
    <Param name="Force stereo" updates="None" val="True" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="False" valType="bool"/>
    <Param name="HTML path" updates="None" val="html" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="" valType="str"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="height" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="[1440, 900]" valType="code"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="$[1,1,1]" valType="str"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="expName" updates="None" val="EmotStaircase" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Sync" valType="str"/>
    <Param name="logging level" updates="None" val="exp" valType="code"/>
  </Settings>
  <Routines>
    <Routine name="Ans">
      <TextComponent name="Answer">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.035" valType="code"/>
        <Param name="name" updates="None" val="Answer" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="2.0" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="ANGRY (L arrow key) or HAPPY (R arrow key)" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="key_resp">
        <Param name="allowedKeys" updates="constant" val="'left','right'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="2.0" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="late">
      <TextComponent name="youweretoolate">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.04" valType="code"/>
        <Param name="name" updates="None" val="youweretoolate" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.2" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="YOU WERE TOO LATE" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <CodeComponent name="late_cd">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Both" valType="str"/>
        <Param name="Each Frame" updates="constant" val="if key_resp.keys != 'left' and key_resp.keys != 'right':&amp;#10;    continueRoutine=True &amp;#10;&amp;#10;if key_sliderConf.keys == &quot;space&quot; or sliderConf.getRating() != undefined:&amp;#10;    continueRoutine=False " valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="if ((key_resp.keys !== &quot;left&quot;) &amp;&amp; (key_resp.keys !== &quot;right&quot;)) {&amp;#10;    continueRoutine = true;&amp;#10;}&amp;#10;&amp;#10;if ((key_sliderConf.keys === &quot;space&quot;) || (sliderConf.getRating() !== undefined)) {&amp;#10;    continueRoutine = false;&amp;#10;}" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="late_cd" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="_1_5">
      <CodeComponent name="blank_code">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="psychoJS.experiment.addData(&quot;Stimulus&quot;, Stim);&amp;#10;psychoJS.experiment.addData(&quot;Correctness&quot;, corrAns[corrAns.length-1]);&amp;#10;psychoJS.experiment.addData(&quot;Reverse&quot;, Reverse);&amp;#10;psychoJS.experiment.addData(&quot;StepSize&quot;, step);&amp;#10;&amp;#10;if (key_resp.keys === 'left') {&amp;#10;    psychoJS.experiment.addData('EmotResponse','Angry');&amp;#10;} else if (key_resp.keys === 'right') {&amp;#10;    psychoJS.experiment.addData('EmotResponse','Happy');&amp;#10;} else {&amp;#10;    psychoJS.experiment.addData('EmotResponse','NA');&amp;#10;}&amp;#10;&amp;#10;psychoJS.experiment.addData(&quot;Gender&quot;, Gender[trial_G]);&amp;#10;&amp;#10;trial = trial + 1;&amp;#10;&amp;#10;if (corrAns[corrAns.length-1] != 'NA') {&amp;#10;    trial_G = trial_G + 1;&amp;#10;}&amp;#10;&amp;#10;if (trial &lt; 30) {&amp;#10;    Stimuli=eval(&quot;Stimuli_&quot;+Gender[trial_G])&amp;#10;    Stim=Stimuli[startVal][0];&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# add some data for this trial&amp;#10;thisExp.addData('Stimulus', Stim)&amp;#10;thisExp.addData('Correctness', corrAns[-1])&amp;#10;thisExp.addData('Reverse', Reverse)&amp;#10;thisExp.addData('StepSize', step)&amp;#10;&amp;#10;if key_resp.keys == 'left':&amp;#10;    thisExp.addData('EmotResponse','Angry')&amp;#10;elif key_resp.keys == 'right':&amp;#10;    thisExp.addData('EmotResponse','Happy')&amp;#10;else:&amp;#10;    thisExp.addData('EmotResponse','NA')&amp;#10;&amp;#10;thisExp.addData(&quot;Gender&quot;, Gender[trial_G])&amp;#10;# end of trial - move to next line in data output&amp;#10;# thisExp.nextEntry()&amp;#10;&amp;#10;#print(&quot;trial before  &quot;, trial)&amp;#10;trial=trial+1&amp;#10;#print(&quot;trial after add  &quot;, trial)&amp;#10;&amp;#10;#print(&quot;trial_G before  &quot;, trial_G)&amp;#10;if corrAns[-1] != 'NA':&amp;#10;    trial_G=trial_G+1&amp;#10;#print(&quot;trial_G after add  &quot;, trial_G)&amp;#10;&amp;#10;&amp;#10;if trial &lt; 30:&amp;#10;    Stimuli=eval('Stimuli_'+Gender[trial_G])&amp;#10;    Stim=Stimuli[startVal][0]&amp;#10;#print(&quot;Stim &quot;, Stim)&amp;#10;#print('\n')&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Both" valType="str"/>
        <Param name="Each Frame" updates="constant" val="if trial_G == 30:&amp;#10;    continueRoutine=False " valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="if (trial_G === 30) {&amp;#10;    continueRoutine = false; &amp;#10;}" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="console.log('before sliderConf.getRating()..  ',sliderConf.getRating());&amp;#10;console.log('after sliderConf.getRating()..  ',sliderConf.getRating());&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="&amp;#10;&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="blank_code" valType="code"/>
      </CodeComponent>
      <TextComponent name="Blank">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.03" valType="code"/>
        <Param name="name" updates="None" val="Blank" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0.15)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="&amp;#10;" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="End">
      <TextComponent name="End_txt">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.04" valType="code"/>
        <Param name="name" updates="None" val="End_txt" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="You have completed the session. Thank you!&amp;#10;&amp;#10;Press Space to finish" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="End_key_resp">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="End_key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Start">
      <TextComponent name="Start_exp">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.035" valType="code"/>
        <Param name="name" updates="None" val="Start_exp" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="We aim to investigate how people discriminate between happy and angry facial expressions.&amp;#10;&amp;#10;You will have to decide within 2 seconds if the face briefly presented on each trial is angry or happy.&amp;#10;&amp;#10;ANGRY - Left arrow key     |     HAPPY - Right arrow key&amp;#10;&amp;#10;Then, you will have to rate within 3 seconds how confident you are in your judgement using a slider from 1 to 100, with indicators Unsure (1), Somewhat sure (34), Fairly sure (67), Very sure(100). &amp;#10;&amp;#10;The run consists of 60 trials, with a short break after the first 30 trials, and will take about 5 minutes.&amp;#10;&amp;#10;Press ''Space'' to start...&amp;#10;" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Start_key_resp">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Start_key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="Start_code">
        <Param name="Begin Experiment" updates="constant" val="import random&amp;#10;&amp;#10;Stimuli_F=[['f_000.png','Happy',0,'F'],['f_001.png','Happy',1,'F'],['f_002.png','Happy',2,'F'],['f_003.png','Happy',3,'F'],['f_004.png','Happy',4,'F'],['f_005.png','Happy',5,'F'],['f_006.png','Happy',6,'F'],['f_007.png','Happy',7,'F'],['f_008.png','Happy',8,'F'],['f_009.png','Happy',9,'F'],['f_010.png','Happy',10,'F'],['f_011.png','Happy',11,'F'],['f_012.png','Happy',12,'F'],['f_013.png','Happy',13,'F'],['f_014.png','Happy',14,'F'],['f_015.png','Happy',15,'F'],['f_016.png','Happy',16,'F'],['f_017.png','Happy',17,'F'],['f_018.png','Happy',18,'F'],['f_019.png','Happy',19,'F'],&amp;#10;['f_020.png','Happy',20,'F'],['f_021.png','Happy',21,'F'],['f_022.png','Happy',22,'F'],['f_023.png','Happy',23,'F'],['f_024.png','Happy',24,'F'],['f_025.png','Happy',25,'F'],['f_026.png','Happy',26,'F'],['f_027.png','Happy',27,'F'],['f_028.png','Happy',28,'F'],['f_029.png','Happy',29,'F'],['f_030.png','Happy',30,'F'],['f_031.png','Happy',31,'F'],['f_032.png','Happy',32,'F'],['f_033.png','Happy',33,'F'],['f_034.png','Happy',34,'F'],['f_035.png','Happy',35,'F'],['f_036.png','Happy',36,'F'],['f_037.png','Happy',37,'F'],['f_038.png','Happy',38,'F'],['f_039.png','Happy',39,'F'],&amp;#10;['f_040.png','Happy',40,'F'],['f_041.png','Happy',41,'F'],['f_042.png','Happy',42,'F'],['f_043.png','Happy',43,'F'],['f_044.png','Happy',44,'F'],['f_045.png','Happy',45,'F'],['f_046.png','Happy',46,'F'],['f_047.png','Happy',47,'F'],['f_048.png','Happy',48,'F'],['f_049.png','Happy',49,'F'],['f_050.png','Happy',50,'F'],['f_051.png','Happy',51,'F'],['f_052.png','Happy',52,'F'],['f_053.png','Happy',53,'F'],['f_054.png','Happy',54,'F'],['f_055.png','Happy',55,'F'],['f_056.png','Happy',56,'F'],['f_057.png','Happy',57,'F'],['f_058.png','Happy',58,'F'],['f_059.png','Happy',59,'F'],&amp;#10;['f_060.png','Happy',60,'F'],['f_061.png','Happy',61,'F'],['f_062.png','Happy',62,'F'],['f_063.png','Happy',63,'F'],['f_064.png','Happy',64,'F'],['f_065.png','Happy',65,'F'],['f_066.png','Happy',66,'F'],['f_067.png','Happy',67,'F'],['f_068.png','Happy',68,'F'],['f_069.png','Happy',69,'F'],['f_070.png','Happy',70,'F'],['f_071.png','Happy',71,'F'],['f_072.png','Happy',72,'F'],['f_073.png','Happy',73,'F'],['f_074.png','Happy',74,'F'],['f_075.png','Happy',75,'F'],['f_076.png','Happy',76,'F'],['f_077.png','Happy',77,'F'],['f_078.png','Happy',78,'F'],['f_079.png','Happy',79,'F'],&amp;#10;['f_080.png','Happy',80,'F'],['f_081.png','Happy',81,'F'],['f_082.png','Happy',82,'F'],['f_083.png','Happy',83,'F'],['f_084.png','Happy',84,'F'],['f_085.png','Happy',85,'F'],['f_086.png','Happy',86,'F'],['f_087.png','Happy',87,'F'],['f_088.png','Happy',88,'F'],['f_089.png','Happy',89,'F'],['f_090.png','Happy',90,'F'],['f_091.png','Happy',91,'F'],['f_092.png','Happy',92,'F'],['f_093.png','Happy',93,'F'],['f_094.png','Happy',94,'F'],['f_095.png','Happy',95,'F'],['f_096.png','Happy',96,'F'],['f_097.png','Happy',97,'F'],['f_098.png','Happy',98,'F'],['f_099.png','Happy',99,'F'],&amp;#10;['f_101.png','Angry',101,'F'],['f_102.png','Angry',102,'F'],['f_103.png','Angry',103,'F'],['f_104.png','Angry',104,'F'],['f_105.png','Angry',105,'F'],['f_106.png','Angry',106,'F'],['f_107.png','Angry',107,'F'],['f_108.png','Angry',108,'F'],['f_109.png','Angry',109,'F'],['f_110.png','Angry',110,'F'],['f_111.png','Angry',111,'F'],['f_112.png','Angry',112,'F'],['f_113.png','Angry',113,'F'],['f_114.png','Angry',114,'F'],['f_115.png','Angry',115,'F'],['f_116.png','Angry',116,'F'],['f_117.png','Angry',117,'F'],['f_118.png','Angry',118,'F'],['f_119.png','Angry',119,'F'],['f_120.png','Angry',120,'F'],&amp;#10;['f_121.png','Angry',121,'F'],['f_122.png','Angry',122,'F'],['f_123.png','Angry',123,'F'],['f_124.png','Angry',124,'F'],['f_125.png','Angry',125,'F'],['f_126.png','Angry',126,'F'],['f_127.png','Angry',127,'F'],['f_128.png','Angry',128,'F'],['f_129.png','Angry',129,'F'],['f_130.png','Angry',130,'F'],['f_131.png','Angry',131,'F'],['f_132.png','Angry',132,'F'],['f_133.png','Angry',133,'F'],['f_134.png','Angry',134,'F'],['f_135.png','Angry',135,'F'],['f_136.png','Angry',136,'F'],['f_137.png','Angry',137,'F'],['f_138.png','Angry',138,'F'],['f_139.png','Angry',139,'F'],['f_140.png','Angry',140,'F'],&amp;#10;['f_141.png','Angry',141,'F'],['f_142.png','Angry',142,'F'],['f_143.png','Angry',143,'F'],['f_144.png','Angry',144,'F'],['f_145.png','Angry',145,'F'],['f_146.png','Angry',146,'F'],['f_147.png','Angry',147,'F'],['f_148.png','Angry',148,'F'],['f_149.png','Angry',149,'F'],['f_150.png','Angry',150,'F'],['f_151.png','Angry',151,'F'],['f_152.png','Angry',152,'F'],['f_153.png','Angry',153,'F'],['f_154.png','Angry',154,'F'],['f_155.png','Angry',155,'F'],['f_156.png','Angry',156,'F'],['f_157.png','Angry',157,'F'],['f_158.png','Angry',158,'F'],['f_159.png','Angry',159,'F'],['f_160.png','Angry',160,'F'],&amp;#10;['f_161.png','Angry',161,'F'],['f_162.png','Angry',162,'F'],['f_163.png','Angry',163,'F'],['f_164.png','Angry',164,'F'],['f_165.png','Angry',165,'F'],['f_166.png','Angry',166,'F'],['f_167.png','Angry',167,'F'],['f_168.png','Angry',168,'F'],['f_169.png','Angry',169,'F'],['f_170.png','Angry',170,'F'],['f_171.png','Angry',171,'F'],['f_172.png','Angry',172,'F'],['f_173.png','Angry',173,'F'],['f_174.png','Angry',174,'F'],['f_175.png','Angry',175,'F'],['f_176.png','Angry',176,'F'],['f_177.png','Angry',177,'F'],['f_178.png','Angry',178,'F'],['f_179.png','Angry',179,'F'],['f_180.png','Angry',180,'F'],&amp;#10;['f_181.png','Angry',181,'F'],['f_182.png','Angry',182,'F'],['f_183.png','Angry',183,'F'],['f_184.png','Angry',184,'F'],['f_185.png','Angry',185,'F'],['f_186.png','Angry',186,'F'],['f_187.png','Angry',187,'F'],['f_188.png','Angry',188,'F'],['f_189.png','Angry',189,'F'],['f_190.png','Angry',190,'F'],['f_191.png','Angry',191,'F'],['f_192.png','Angry',192,'F'],['f_193.png','Angry',193,'F'],['f_194.png','Angry',194,'F'],['f_195.png','Angry',195,'F'],['f_196.png','Angry',196,'F'],['f_197.png','Angry',197,'F'],['f_198.png','Angry',198,'F'],['f_199.png','Angry',199,'F'],['f_200.png','Angry',200,'F']]&amp;#10;&amp;#10;Stimuli_M=[['m_000.png','Happy',0,'M'],['m_001.png','Happy',1,'M'],['m_002.png','Happy',2,'M'],['m_003.png','Happy',3,'M'],['m_004.png','Happy',4,'M'],['m_005.png','Happy',5,'M'],['m_006.png','Happy',6,'M'],['m_007.png','Happy',7,'M'],['m_008.png','Happy',8,'M'],['m_009.png','Happy',9,'M'],['m_010.png','Happy',10,'M'],['m_011.png','Happy',11,'M'],['m_012.png','Happy',12,'M'],['m_013.png','Happy',13,'M'],['m_014.png','Happy',14,'M'],['m_015.png','Happy',15,'M'],['m_016.png','Happy',16,'M'],['m_017.png','Happy',17,'M'],['m_018.png','Happy',18,'M'],['m_019.png','Happy',19,'M'],&amp;#10;['m_020.png','Happy',20,'M'],['m_021.png','Happy',21,'M'],['m_022.png','Happy',22,'M'],['m_023.png','Happy',23,'M'],['m_024.png','Happy',24,'M'],['m_025.png','Happy',25,'M'],['m_026.png','Happy',26,'M'],['m_027.png','Happy',27,'M'],['m_028.png','Happy',28,'M'],['m_029.png','Happy',29,'M'],['m_030.png','Happy',30,'M'],['m_031.png','Happy',31,'M'],['m_032.png','Happy',32,'M'],['m_033.png','Happy',33,'M'],['m_034.png','Happy',34,'M'],['m_035.png','Happy',35,'M'],['m_036.png','Happy',36,'M'],['m_037.png','Happy',37,'M'],['m_038.png','Happy',38,'M'],['m_039.png','Happy',39,'M'],&amp;#10;['m_040.png','Happy',40,'M'],['m_041.png','Happy',41,'M'],['m_042.png','Happy',42,'M'],['m_043.png','Happy',43,'M'],['m_044.png','Happy',44,'M'],['m_045.png','Happy',45,'M'],['m_046.png','Happy',46,'M'],['m_047.png','Happy',47,'M'],['m_048.png','Happy',48,'M'],['m_049.png','Happy',49,'M'],['m_050.png','Happy',50,'M'],['m_051.png','Happy',51,'M'],['m_052.png','Happy',52,'M'],['m_053.png','Happy',53,'M'],['m_054.png','Happy',54,'M'],['m_055.png','Happy',55,'M'],['m_056.png','Happy',56,'M'],['m_057.png','Happy',57,'M'],['m_058.png','Happy',58,'M'],['m_059.png','Happy',59,'M'],&amp;#10;['m_060.png','Happy',60,'M'],['m_061.png','Happy',61,'M'],['m_062.png','Happy',62,'M'],['m_063.png','Happy',63,'M'],['m_064.png','Happy',64,'M'],['m_065.png','Happy',65,'M'],['m_066.png','Happy',66,'M'],['m_067.png','Happy',67,'M'],['m_068.png','Happy',68,'M'],['m_069.png','Happy',69,'M'],['m_070.png','Happy',70,'M'],['m_071.png','Happy',71,'M'],['m_072.png','Happy',72,'M'],['m_073.png','Happy',73,'M'],['m_074.png','Happy',74,'M'],['m_075.png','Happy',75,'M'],['m_076.png','Happy',76,'M'],['m_077.png','Happy',77,'M'],['m_078.png','Happy',78,'M'],['m_079.png','Happy',79,'M'],&amp;#10;['m_080.png','Happy',80,'M'],['m_081.png','Happy',81,'M'],['m_082.png','Happy',82,'M'],['m_083.png','Happy',83,'M'],['m_084.png','Happy',84,'M'],['m_085.png','Happy',85,'M'],['m_086.png','Happy',86,'M'],['m_087.png','Happy',87,'M'],['m_088.png','Happy',88,'M'],['m_089.png','Happy',89,'M'],['m_090.png','Happy',90,'M'],['m_091.png','Happy',91,'M'],['m_092.png','Happy',92,'M'],['m_093.png','Happy',93,'M'],['m_094.png','Happy',94,'M'],['m_095.png','Happy',95,'M'],['m_096.png','Happy',96,'M'],['m_097.png','Happy',97,'M'],['m_098.png','Happy',98,'M'],['m_099.png','Happy',99,'M'],&amp;#10;['m_101.png','Angry',101,'M'],['m_102.png','Angry',102,'M'],['m_103.png','Angry',103,'M'],['m_104.png','Angry',104,'M'],['m_105.png','Angry',105,'M'],['m_106.png','Angry',106,'M'],['m_107.png','Angry',107,'M'],['m_108.png','Angry',108,'M'],['m_109.png','Angry',109,'M'],['m_110.png','Angry',110,'M'],['m_111.png','Angry',111,'M'],['m_112.png','Angry',112,'M'],['m_113.png','Angry',113,'M'],['m_114.png','Angry',114,'M'],['m_115.png','Angry',115,'M'],['m_116.png','Angry',116,'M'],['m_117.png','Angry',117,'M'],['m_118.png','Angry',118,'M'],['m_119.png','Angry',119,'M'],['m_120.png','Angry',120,'M'],&amp;#10;['m_121.png','Angry',121,'M'],['m_122.png','Angry',122,'M'],['m_123.png','Angry',123,'M'],['m_124.png','Angry',124,'M'],['m_125.png','Angry',125,'M'],['m_126.png','Angry',126,'M'],['m_127.png','Angry',127,'M'],['m_128.png','Angry',128,'M'],['m_129.png','Angry',129,'M'],['m_130.png','Angry',130,'M'],['m_131.png','Angry',131,'M'],['m_132.png','Angry',132,'M'],['m_133.png','Angry',133,'M'],['m_134.png','Angry',134,'M'],['m_135.png','Angry',135,'M'],['m_136.png','Angry',136,'M'],['m_137.png','Angry',137,'M'],['m_138.png','Angry',138,'M'],['m_139.png','Angry',139,'M'],['m_140.png','Angry',140,'M'],&amp;#10;['m_141.png','Angry',141,'M'],['m_142.png','Angry',142,'M'],['m_143.png','Angry',143,'M'],['m_144.png','Angry',144,'M'],['m_145.png','Angry',145,'M'],['m_146.png','Angry',146,'M'],['m_147.png','Angry',147,'M'],['m_148.png','Angry',148,'M'],['m_149.png','Angry',149,'M'],['m_150.png','Angry',150,'M'],['m_151.png','Angry',151,'M'],['m_152.png','Angry',152,'M'],['m_153.png','Angry',153,'M'],['m_154.png','Angry',154,'M'],['m_155.png','Angry',155,'M'],['m_156.png','Angry',156,'M'],['m_157.png','Angry',157,'M'],['m_158.png','Angry',158,'M'],['m_159.png','Angry',159,'M'],['m_160.png','Angry',160,'M'],&amp;#10;['m_161.png','Angry',161,'M'],['m_162.png','Angry',162,'M'],['m_163.png','Angry',163,'M'],['m_164.png','Angry',164,'M'],['m_165.png','Angry',165,'M'],['m_166.png','Angry',166,'M'],['m_167.png','Angry',167,'M'],['m_168.png','Angry',168,'M'],['m_169.png','Angry',169,'M'],['m_170.png','Angry',170,'M'],['m_171.png','Angry',171,'M'],['m_172.png','Angry',172,'M'],['m_173.png','Angry',173,'M'],['m_174.png','Angry',174,'M'],['m_175.png','Angry',175,'M'],['m_176.png','Angry',176,'M'],['m_177.png','Angry',177,'M'],['m_178.png','Angry',178,'M'],['m_179.png','Angry',179,'M'],['m_180.png','Angry',180,'M'],&amp;#10;['m_181.png','Angry',181,'M'],['m_182.png','Angry',182,'M'],['m_183.png','Angry',183,'M'],['m_184.png','Angry',184,'M'],['m_185.png','Angry',185,'M'],['m_186.png','Angry',186,'M'],['m_187.png','Angry',187,'M'],['m_188.png','Angry',188,'M'],['m_189.png','Angry',189,'M'],['m_190.png','Angry',190,'M'],['m_191.png','Angry',191,'M'],['m_192.png','Angry',192,'M'],['m_193.png','Angry',193,'M'],['m_194.png','Angry',194,'M'],['m_195.png','Angry',195,'M'],['m_196.png','Angry',196,'M'],['m_197.png','Angry',197,'M'],['m_198.png','Angry',198,'M'],['m_199.png','Angry',199,'M'],['m_200.png','Angry',200,'M']]&amp;#10;&amp;#10;Stimuli=[]&amp;#10;&amp;#10;Emot=[&quot;Happy&quot;,&quot;Angry&quot;]&amp;#10;random.shuffle(Emot)&amp;#10;#print(&quot;Emot..  &quot;, Emot)&amp;#10;Emotion=0&amp;#10;&amp;#10;Gender=[&quot;F&quot;,&quot;M&quot;,&quot;F&quot;,&quot;M&quot;,&quot;F&quot;,&quot;M&quot;,&quot;F&quot;,&quot;M&quot;,&quot;F&quot;,&quot;M&quot;,&quot;F&quot;,&quot;M&quot;,&quot;F&quot;,&quot;M&quot;,&quot;F&quot;,&quot;M&quot;,&quot;F&quot;,&quot;M&quot;,&quot;F&quot;,&quot;M&quot;,&quot;F&quot;,&quot;M&quot;,&quot;F&quot;,&quot;M&quot;,&quot;F&quot;,&quot;M&quot;,&quot;F&quot;,&quot;M&quot;,&quot;F&quot;,&quot;M&quot;]&amp;#10;random.shuffle(Gender)&amp;#10;#print(&quot;Gender&quot;,Gender)&amp;#10;&amp;#10;trial_G=0&amp;#10;trial=0&amp;#10;&amp;#10;startVal_Happy=16   # which is the starting value for Happy&amp;#10;startVal_Angry=185   # which is the starting value for Angry&amp;#10;&amp;#10;startVal=eval('startVal_'+Emot[Emotion])&amp;#10;&amp;#10;Stimuli=eval('Stimuli_'+Gender[trial_G])&amp;#10;&amp;#10;Stim=[]&amp;#10;&amp;#10;Stim=Stimuli[startVal][0]&amp;#10;&amp;#10;Intensity=[]&amp;#10;&amp;#10;corrAns=[]&amp;#10;Correctness=[]&amp;#10;Correctness_Int=[]&amp;#10;Reverse=0&amp;#10;step_sizes=[32,16,8,6,4,2]&amp;#10;step=step_sizes[0]&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="function shuffle(arra1) {&amp;#10;    var ctr = arra1.length, temp, index;&amp;#10;    while (ctr &gt; 0) {&amp;#10;        index = Math.floor(Math.random() * ctr);&amp;#10;        ctr--;&amp;#10;        temp = arra1[ctr];&amp;#10;        arra1[ctr] = arra1[index];&amp;#10;        arra1[index] = temp;&amp;#10;    }&amp;#10;    return arra1;&amp;#10;}&amp;#10;&amp;#10;&amp;#10;Stimuli_F=[['f_000.png','Happy',0,'F'],['f_001.png','Happy',1,'F'],['f_002.png','Happy',2,'F'],['f_003.png','Happy',3,'F'],['f_004.png','Happy',4,'F'],['f_005.png','Happy',5,'F'],['f_006.png','Happy',6,'F'],['f_007.png','Happy',7,'F'],['f_008.png','Happy',8,'F'],['f_009.png','Happy',9,'F'],['f_010.png','Happy',10,'F'],['f_011.png','Happy',11,'F'],['f_012.png','Happy',12,'F'],['f_013.png','Happy',13,'F'],['f_014.png','Happy',14,'F'],['f_015.png','Happy',15,'F'],['f_016.png','Happy',16,'F'],['f_017.png','Happy',17,'F'],['f_018.png','Happy',18,'F'],['f_019.png','Happy',19,'F'],&amp;#10;['f_020.png','Happy',20,'F'],['f_021.png','Happy',21,'F'],['f_022.png','Happy',22,'F'],['f_023.png','Happy',23,'F'],['f_024.png','Happy',24,'F'],['f_025.png','Happy',25,'F'],['f_026.png','Happy',26,'F'],['f_027.png','Happy',27,'F'],['f_028.png','Happy',28,'F'],['f_029.png','Happy',29,'F'],['f_030.png','Happy',30,'F'],['f_031.png','Happy',31,'F'],['f_032.png','Happy',32,'F'],['f_033.png','Happy',33,'F'],['f_034.png','Happy',34,'F'],['f_035.png','Happy',35,'F'],['f_036.png','Happy',36,'F'],['f_037.png','Happy',37,'F'],['f_038.png','Happy',38,'F'],['f_039.png','Happy',39,'F'],&amp;#10;['f_040.png','Happy',40,'F'],['f_041.png','Happy',41,'F'],['f_042.png','Happy',42,'F'],['f_043.png','Happy',43,'F'],['f_044.png','Happy',44,'F'],['f_045.png','Happy',45,'F'],['f_046.png','Happy',46,'F'],['f_047.png','Happy',47,'F'],['f_048.png','Happy',48,'F'],['f_049.png','Happy',49,'F'],['f_050.png','Happy',50,'F'],['f_051.png','Happy',51,'F'],['f_052.png','Happy',52,'F'],['f_053.png','Happy',53,'F'],['f_054.png','Happy',54,'F'],['f_055.png','Happy',55,'F'],['f_056.png','Happy',56,'F'],['f_057.png','Happy',57,'F'],['f_058.png','Happy',58,'F'],['f_059.png','Happy',59,'F'],&amp;#10;['f_060.png','Happy',60,'F'],['f_061.png','Happy',61,'F'],['f_062.png','Happy',62,'F'],['f_063.png','Happy',63,'F'],['f_064.png','Happy',64,'F'],['f_065.png','Happy',65,'F'],['f_066.png','Happy',66,'F'],['f_067.png','Happy',67,'F'],['f_068.png','Happy',68,'F'],['f_069.png','Happy',69,'F'],['f_070.png','Happy',70,'F'],['f_071.png','Happy',71,'F'],['f_072.png','Happy',72,'F'],['f_073.png','Happy',73,'F'],['f_074.png','Happy',74,'F'],['f_075.png','Happy',75,'F'],['f_076.png','Happy',76,'F'],['f_077.png','Happy',77,'F'],['f_078.png','Happy',78,'F'],['f_079.png','Happy',79,'F'],&amp;#10;['f_080.png','Happy',80,'F'],['f_081.png','Happy',81,'F'],['f_082.png','Happy',82,'F'],['f_083.png','Happy',83,'F'],['f_084.png','Happy',84,'F'],['f_085.png','Happy',85,'F'],['f_086.png','Happy',86,'F'],['f_087.png','Happy',87,'F'],['f_088.png','Happy',88,'F'],['f_089.png','Happy',89,'F'],['f_090.png','Happy',90,'F'],['f_091.png','Happy',91,'F'],['f_092.png','Happy',92,'F'],['f_093.png','Happy',93,'F'],['f_094.png','Happy',94,'F'],['f_095.png','Happy',95,'F'],['f_096.png','Happy',96,'F'],['f_097.png','Happy',97,'F'],['f_098.png','Happy',98,'F'],['f_099.png','Happy',99,'F'],&amp;#10;['f_101.png','Angry',101,'F'],['f_102.png','Angry',102,'F'],['f_103.png','Angry',103,'F'],['f_104.png','Angry',104,'F'],['f_105.png','Angry',105,'F'],['f_106.png','Angry',106,'F'],['f_107.png','Angry',107,'F'],['f_108.png','Angry',108,'F'],['f_109.png','Angry',109,'F'],['f_110.png','Angry',110,'F'],['f_111.png','Angry',111,'F'],['f_112.png','Angry',112,'F'],['f_113.png','Angry',113,'F'],['f_114.png','Angry',114,'F'],['f_115.png','Angry',115,'F'],['f_116.png','Angry',116,'F'],['f_117.png','Angry',117,'F'],['f_118.png','Angry',118,'F'],['f_119.png','Angry',119,'F'],['f_120.png','Angry',120,'F'],&amp;#10;['f_121.png','Angry',121,'F'],['f_122.png','Angry',122,'F'],['f_123.png','Angry',123,'F'],['f_124.png','Angry',124,'F'],['f_125.png','Angry',125,'F'],['f_126.png','Angry',126,'F'],['f_127.png','Angry',127,'F'],['f_128.png','Angry',128,'F'],['f_129.png','Angry',129,'F'],['f_130.png','Angry',130,'F'],['f_131.png','Angry',131,'F'],['f_132.png','Angry',132,'F'],['f_133.png','Angry',133,'F'],['f_134.png','Angry',134,'F'],['f_135.png','Angry',135,'F'],['f_136.png','Angry',136,'F'],['f_137.png','Angry',137,'F'],['f_138.png','Angry',138,'F'],['f_139.png','Angry',139,'F'],['f_140.png','Angry',140,'F'],&amp;#10;['f_141.png','Angry',141,'F'],['f_142.png','Angry',142,'F'],['f_143.png','Angry',143,'F'],['f_144.png','Angry',144,'F'],['f_145.png','Angry',145,'F'],['f_146.png','Angry',146,'F'],['f_147.png','Angry',147,'F'],['f_148.png','Angry',148,'F'],['f_149.png','Angry',149,'F'],['f_150.png','Angry',150,'F'],['f_151.png','Angry',151,'F'],['f_152.png','Angry',152,'F'],['f_153.png','Angry',153,'F'],['f_154.png','Angry',154,'F'],['f_155.png','Angry',155,'F'],['f_156.png','Angry',156,'F'],['f_157.png','Angry',157,'F'],['f_158.png','Angry',158,'F'],['f_159.png','Angry',159,'F'],['f_160.png','Angry',160,'F'],&amp;#10;['f_161.png','Angry',161,'F'],['f_162.png','Angry',162,'F'],['f_163.png','Angry',163,'F'],['f_164.png','Angry',164,'F'],['f_165.png','Angry',165,'F'],['f_166.png','Angry',166,'F'],['f_167.png','Angry',167,'F'],['f_168.png','Angry',168,'F'],['f_169.png','Angry',169,'F'],['f_170.png','Angry',170,'F'],['f_171.png','Angry',171,'F'],['f_172.png','Angry',172,'F'],['f_173.png','Angry',173,'F'],['f_174.png','Angry',174,'F'],['f_175.png','Angry',175,'F'],['f_176.png','Angry',176,'F'],['f_177.png','Angry',177,'F'],['f_178.png','Angry',178,'F'],['f_179.png','Angry',179,'F'],['f_180.png','Angry',180,'F'],&amp;#10;['f_181.png','Angry',181,'F'],['f_182.png','Angry',182,'F'],['f_183.png','Angry',183,'F'],['f_184.png','Angry',184,'F'],['f_185.png','Angry',185,'F'],['f_186.png','Angry',186,'F'],['f_187.png','Angry',187,'F'],['f_188.png','Angry',188,'F'],['f_189.png','Angry',189,'F'],['f_190.png','Angry',190,'F'],['f_191.png','Angry',191,'F'],['f_192.png','Angry',192,'F'],['f_193.png','Angry',193,'F'],['f_194.png','Angry',194,'F'],['f_195.png','Angry',195,'F'],['f_196.png','Angry',196,'F'],['f_197.png','Angry',197,'F'],['f_198.png','Angry',198,'F'],['f_199.png','Angry',199,'F'],['f_200.png','Angry',200,'F']];&amp;#10;&amp;#10;Stimuli_M=[['m_000.png','Happy',0,'M'],['m_001.png','Happy',1,'M'],['m_002.png','Happy',2,'M'], ['m_003.png','Happy',3,'M'],['m_004.png','Happy',4,'M'],['m_005.png','Happy',5,'M'],['m_006.png','Happy',6,'M'],['m_007.png','Happy',7,'M'],['m_008.png','Happy',8,'M'],['m_009.png','Happy',9,'M'],['m_010.png','Happy',10,'M'],['m_011.png','Happy',11,'M'],['m_012.png','Happy',12,'M'],['m_013.png','Happy',13,'M'],['m_014.png','Happy',14,'M'],['m_015.png','Happy',15,'M'],['m_016.png','Happy',16,'M'],['m_017.png','Happy',17,'M'],['m_018.png','Happy',18,'M'],['m_019.png','Happy',19,'M'],&amp;#10;['m_020.png','Happy',20,'M'],['m_021.png','Happy',21,'M'],['m_022.png','Happy',22,'M'],['m_023.png','Happy',23,'M'],['m_024.png','Happy',24,'M'],['m_025.png','Happy',25,'M'],['m_026.png','Happy',26,'M'],['m_027.png','Happy',27,'M'],['m_028.png','Happy',28,'M'],['m_029.png','Happy',29,'M'],['m_030.png','Happy',30,'M'],['m_031.png','Happy',31,'M'],['m_032.png','Happy',32,'M'],['m_033.png','Happy',33,'M'],['m_034.png','Happy',34,'M'],['m_035.png','Happy',35,'M'],['m_036.png','Happy',36,'M'],['m_037.png','Happy',37,'M'],['m_038.png','Happy',38,'M'],['m_039.png','Happy',39,'M'],&amp;#10;['m_040.png','Happy',40,'M'],['m_041.png','Happy',41,'M'],['m_042.png','Happy',42,'M'],['m_043.png','Happy',43,'M'],['m_044.png','Happy',44,'M'],['m_045.png','Happy',45,'M'],['m_046.png','Happy',46,'M'],['m_047.png','Happy',47,'M'],['m_048.png','Happy',48,'M'],['m_049.png','Happy',49,'M'],['m_050.png','Happy',50,'M'],['m_051.png','Happy',51,'M'],['m_052.png','Happy',52,'M'],['m_053.png','Happy',53,'M'],['m_054.png','Happy',54,'M'],['m_055.png','Happy',55,'M'],['m_056.png','Happy',56,'M'],['m_057.png','Happy',57,'M'],['m_058.png','Happy',58,'M'],['m_059.png','Happy',59,'M'],&amp;#10;['m_060.png','Happy',60,'M'],['m_061.png','Happy',61,'M'],['m_062.png','Happy',62,'M'],['m_063.png','Happy',63,'M'],['m_064.png','Happy',64,'M'],['m_065.png','Happy',65,'M'],['m_066.png','Happy',66,'M'],['m_067.png','Happy',67,'M'],['m_068.png','Happy',68,'M'],['m_069.png','Happy',69,'M'],['m_070.png','Happy',70,'M'],['m_071.png','Happy',71,'M'],['m_072.png','Happy',72,'M'],['m_073.png','Happy',73,'M'],['m_074.png','Happy',74,'M'],['m_075.png','Happy',75,'M'],['m_076.png','Happy',76,'M'],['m_077.png','Happy',77,'M'],['m_078.png','Happy',78,'M'],['m_079.png','Happy',79,'M'],&amp;#10;['m_080.png','Happy',80,'M'],['m_081.png','Happy',81,'M'],['m_082.png','Happy',82,'M'],['m_083.png','Happy',83,'M'],['m_084.png','Happy',84,'M'],['m_085.png','Happy',85,'M'],['m_086.png','Happy',86,'M'],['m_087.png','Happy',87,'M'],['m_088.png','Happy',88,'M'],['m_089.png','Happy',89,'M'],['m_090.png','Happy',90,'M'],['m_091.png','Happy',91,'M'],['m_092.png','Happy',92,'M'],['m_093.png','Happy',93,'M'],['m_094.png','Happy',94,'M'],['m_095.png','Happy',95,'M'],['m_096.png','Happy',96,'M'],['m_097.png','Happy',97,'M'],['m_098.png','Happy',98,'M'],['m_099.png','Happy',99,'M'],&amp;#10;['m_101.png','Angry',101,'M'],['m_102.png','Angry',102,'M'],['m_103.png','Angry',103,'M'],['m_104.png','Angry',104,'M'],['m_105.png','Angry',105,'M'],['m_106.png','Angry',106,'M'],['m_107.png','Angry',107,'M'],['m_108.png','Angry',108,'M'],['m_109.png','Angry',109,'M'],['m_110.png','Angry',110,'M'],['m_111.png','Angry',111,'M'],['m_112.png','Angry',112,'M'],['m_113.png','Angry',113,'M'],['m_114.png','Angry',114,'M'],['m_115.png','Angry',115,'M'],['m_116.png','Angry',116,'M'],['m_117.png','Angry',117,'M'],['m_118.png','Angry',118,'M'],['m_119.png','Angry',119,'M'],['m_120.png','Angry',120,'M'],&amp;#10;['m_121.png','Angry',121,'M'],['m_122.png','Angry',122,'M'],['m_123.png','Angry',123,'M'],['m_124.png','Angry',124,'M'],['m_125.png','Angry',125,'M'],['m_126.png','Angry',126,'M'],['m_127.png','Angry',127,'M'],['m_128.png','Angry',128,'M'],['m_129.png','Angry',129,'M'],['m_130.png','Angry',130,'M'],['m_131.png','Angry',131,'M'],['m_132.png','Angry',132,'M'],['m_133.png','Angry',133,'M'],['m_134.png','Angry',134,'M'],['m_135.png','Angry',135,'M'],['m_136.png','Angry',136,'M'],['m_137.png','Angry',137,'M'],['m_138.png','Angry',138,'M'],['m_139.png','Angry',139,'M'],['m_140.png','Angry',140,'M'],&amp;#10;['m_141.png','Angry',141,'M'],['m_142.png','Angry',142,'M'],['m_143.png','Angry',143,'M'],['m_144.png','Angry',144,'M'],['m_145.png','Angry',145,'M'],['m_146.png','Angry',146,'M'],['m_147.png','Angry',147,'M'],['m_148.png','Angry',148,'M'],['m_149.png','Angry',149,'M'],['m_150.png','Angry',150,'M'],['m_151.png','Angry',151,'M'],['m_152.png','Angry',152,'M'],['m_153.png','Angry',153,'M'],['m_154.png','Angry',154,'M'],['m_155.png','Angry',155,'M'],['m_156.png','Angry',156,'M'],['m_157.png','Angry',157,'M'],['m_158.png','Angry',158,'M'],['m_159.png','Angry',159,'M'],['m_160.png','Angry',160,'M'],&amp;#10;['m_161.png','Angry',161,'M'],['m_162.png','Angry',162,'M'],['m_163.png','Angry',163,'M'],['m_164.png','Angry',164,'M'],['m_165.png','Angry',165,'M'],['m_166.png','Angry',166,'M'],['m_167.png','Angry',167,'M'],['m_168.png','Angry',168,'M'],['m_169.png','Angry',169,'M'],['m_170.png','Angry',170,'M'],['m_171.png','Angry',171,'M'],['m_172.png','Angry',172,'M'],['m_173.png','Angry',173,'M'],['m_174.png','Angry',174,'M'],['m_175.png','Angry',175,'M'],['m_176.png','Angry',176,'M'],['m_177.png','Angry',177,'M'],['m_178.png','Angry',178,'M'],['m_179.png','Angry',179,'M'],['m_180.png','Angry',180,'M'],&amp;#10;['m_181.png','Angry',181,'M'],['m_182.png','Angry',182,'M'],['m_183.png','Angry',183,'M'],['m_184.png','Angry',184,'M'],['m_185.png','Angry',185,'M'],['m_186.png','Angry',186,'M'],['m_187.png','Angry',187,'M'],['m_188.png','Angry',188,'M'],['m_189.png','Angry',189,'M'],['m_190.png','Angry',190,'M'],['m_191.png','Angry',191,'M'],['m_192.png','Angry',192,'M'],['m_193.png','Angry',193,'M'],['m_194.png','Angry',194,'M'],['m_195.png','Angry',195,'M'],['m_196.png','Angry',196,'M'],['m_197.png','Angry',197,'M'],['m_198.png','Angry',198,'M'],['m_199.png','Angry',199,'M'],['m_200.png','Angry',200,'M']];&amp;#10;&amp;#10;&amp;#10;Stimuli = [];&amp;#10;&amp;#10;Emot = [&quot;Happy&quot;, &quot;Angry&quot;];&amp;#10;Emot = shuffle(Emot);&amp;#10;&amp;#10;&amp;#10;Emotion = 0;&amp;#10;&amp;#10;Gender=[&quot;F&quot;,&quot;M&quot;,&quot;F&quot;,&quot;M&quot;,&quot;F&quot;,&quot;M&quot;,&quot;F&quot;,&quot;M&quot;,&quot;F&quot;,&quot;M&quot;,&quot;F&quot;,&quot;M&quot;,&quot;F&quot;,&quot;M&quot;,&quot;F&quot;,&quot;M&quot;,&quot;F&quot;,&quot;M&quot;,&quot;F&quot;,&quot;M&quot;,&quot;F&quot;,&quot;M&quot;,&quot;F&quot;,&quot;M&quot;,&quot;F&quot;,&quot;M&quot;,&quot;F&quot;,&quot;M&quot;,&quot;F&quot;,&quot;M&quot;];&amp;#10;Gender = shuffle(Gender);&amp;#10;&amp;#10;&amp;#10;trial_G = 0;&amp;#10;trial=0&amp;#10;&amp;#10;startVal_Happy = 16;&amp;#10;startVal_Angry = 185;&amp;#10;&amp;#10;startVal = eval('startVal_'+Emot[Emotion]);&amp;#10;console.log(&quot;startVal &quot;, startVal);&amp;#10;&amp;#10;Stimuli = eval(&quot;Stimuli_&quot; + Gender[trial_G]);&amp;#10;&amp;#10;Stim = [];&amp;#10;&amp;#10;Stim=Stimuli[startVal][0];&amp;#10;&amp;#10;Intensity = [];&amp;#10;&amp;#10;corrAns = [];&amp;#10;Correctness = [];&amp;#10;Correctness_Int = [];&amp;#10;Reverse = 0;&amp;#10;step_sizes=[32,16,8,6,4,2];&amp;#10;step=step_sizes[0];&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Both" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="Start_code" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Gen">
      <TextComponent name="Gender">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.035" valType="code"/>
        <Param name="name" updates="None" val="Gender" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.2" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Please choose your gender by pressing the corresponding key:&amp;#10;&amp;#10;f (Female), m (Male)" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Gender_key_resp">
        <Param name="allowedKeys" updates="constant" val="'f','m'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Gender_key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.2" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="Gender_cd">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="if (Gender_key_resp.keys === &quot;f&quot;) {&amp;#10;    Stimuli = Stimuli_F;&amp;#10;} else if (Gender_key_resp.keys === &quot;m&quot;) {&amp;#10;    Stimuli = Stimuli_M;&amp;#10;}&amp;#10;&amp;#10;//CSVReader reader2 = new CSVReader(new FileReader('resources/M_Participants.csv'));&amp;#10;//List&lt;String[]&gt; allElements = reader2.readAll();&amp;#10;//allElements.remove(1);&amp;#10;//FileWriter sw = new FileWriter('resources/M_Participants.csv');&amp;#10;//CSVWriter writer = new CSVWriter(sw);&amp;#10;//writer.writeAll(allElements);&amp;#10;//writer.close();&amp;#10;&amp;#10;&amp;#10;fs = require('fs');&amp;#10;fs.write('resources/Participants.csv', Gender_key_resp.keys, 'a');&amp;#10;//writeFile('resources/Participants.csv', Gender_key_resp.keys)&amp;#10;&amp;#10;&amp;#10;Ppts_allLines=[];&amp;#10;&amp;#10;function successFunction(data) {&amp;#10;    Ppts_allLines = data.split('\n'); // split rows at new line&amp;#10;}&amp;#10;&amp;#10;$.ajax({&amp;#10;  url: 'resources/Participants.csv',&amp;#10;  dataType: 'text',&amp;#10;  async: false,&amp;#10;}).done(successFunction);&amp;#10;&amp;#10;console.log(&quot;Ppts_allLines&quot;,Ppts_allLines);&amp;#10;&amp;#10;&amp;#10;for (var item=0; item&lt;Ppts_allLines.length; item++) {&amp;#10;    if (Ppts_allLines[item] == &quot;f&quot;) {&amp;#10;        allFemales=allFemales+1;&amp;#10;    } else if (Ppts_allLines[item] == &quot;m&quot;) {&amp;#10;        allMales=allMales+1;&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;console.log(&quot;allFemales&quot;, allFemales);&amp;#10;console.log(&quot;allMales&quot;, allMales);&amp;#10;&amp;#10;&amp;#10;if (Gender_key_resp.keys === &quot;f&quot;) {&amp;#10;    if ((allFemales % 2) === 1) {&amp;#10;        Emot = [&quot;Happy&quot;, &quot;Angry&quot;];&amp;#10;    } else if ((allFemales % 2) === 0) {&amp;#10;        Emot = [&quot;Angry&quot;, &quot;Happy&quot;];&amp;#10;    }&amp;#10;} else if (Gender_key_resp.keys === &quot;m&quot;) {&amp;#10;        if ((allMales % 2) === 1) {&amp;#10;            Emot = [&quot;Happy&quot;, &quot;Angry&quot;];&amp;#10;        } else if ((allMales % 2) === 0) {&amp;#10;            Emot = [&quot;Angry&quot;, &quot;Happy&quot;];&amp;#10;        }&amp;#10;}&amp;#10;&amp;#10;console.log(allFemales);&amp;#10;console.log(allMales);&amp;#10;&amp;#10;console.log(&quot;Emot&quot;, Emot);&amp;#10;&amp;#10;&amp;#10;startVal = eval((&quot;startVal_&quot; + Emot[Emotion]));&amp;#10;console.log(startVal);&amp;#10;Stim = Stimuli[startVal][0];&amp;#10;console.log(Stim);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="if Gender_key_resp.keys == 'f':&amp;#10;    Stimuli = Stimuli_F&amp;#10;elif Gender_key_resp.keys == 'm':&amp;#10;    Stimuli = Stimuli_M&amp;#10;&amp;#10;# contents = Participants.read()&amp;#10;&amp;#10;Participants = open('Participants.csv', 'a')&amp;#10;Participants.write(Gender_key_resp.keys+'\n')&amp;#10;Participants.close()&amp;#10;print('Participants',Participants)&amp;#10;&amp;#10;Participants = open('Participants.csv', 'r')&amp;#10;Ppts_allLines = Participants.readlines()&amp;#10;print('Ppts_allLines',Ppts_allLines)&amp;#10;No_Ppts_allLines = len(Ppts_allLines)&amp;#10;print('No_Ppts_allLines',No_Ppts_allLines)&amp;#10;Participants.close()&amp;#10;&amp;#10;for item in Ppts_allLines:&amp;#10;    if item == 'f\n':&amp;#10;        allFemales = allFemales+1&amp;#10;    elif item == 'm\n':&amp;#10;        allMales = allMales+1&amp;#10;&amp;#10;print(&quot;allFemales&quot;, allFemales)&amp;#10;print(&quot;allMales&quot;, allMales)&amp;#10;&amp;#10;if Gender_key_resp.keys == 'f':&amp;#10;    if allFemales % 2 == 1:&amp;#10;        Emot = [&quot;Happy&quot;, &quot;Angry&quot;]&amp;#10;    elif allFemales % 2 == 0:&amp;#10;        Emot = [&quot;Angry&quot;, &quot;Happy&quot;]&amp;#10;elif Gender_key_resp.keys == 'm':&amp;#10;    if allMales % 2 ==1:&amp;#10;        Emot = [&quot;Happy&quot;, &quot;Angry&quot;]&amp;#10;    elif allMales % 2 == 0:&amp;#10;        Emot = [&quot;Angry&quot;, &quot;Happy&quot;]&amp;#10;&amp;#10;&amp;#10;&amp;#10;print(&quot;Emot&quot;, Emot)&amp;#10;&amp;#10;startVal = eval('startVal_'+Emot[Emotion])&amp;#10;print(startVal)&amp;#10;&amp;#10;Stim=Stimuli[startVal][0]&amp;#10;print(Stim)&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="Gender_cd" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Brk">
      <CodeComponent name="Brk_cd">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="function shuffle(arra1) {&amp;#10;    var ctr = arra1.length, temp, index;&amp;#10;    while (ctr &gt; 0) {&amp;#10;        index = Math.floor(Math.random() * ctr);&amp;#10;        ctr--;&amp;#10;        temp = arra1[ctr];&amp;#10;        arra1[ctr] = arra1[index];&amp;#10;        arra1[index] = temp;&amp;#10;    }&amp;#10;    return arra1;&amp;#10;}&amp;#10;&amp;#10;Emotion = Emotion + 1;&amp;#10;trial = 0;&amp;#10;trial_G = 0;&amp;#10;&amp;#10;Intensity = [];&amp;#10;&amp;#10;Reverse = 0;&amp;#10;step=step_sizes[0];&amp;#10;&amp;#10;corrAns = [];&amp;#10;&amp;#10;Correctness = [];&amp;#10;Correctness_Int = [];&amp;#10;&amp;#10;Gender = shuffle(Gender);&amp;#10;&amp;#10;&amp;#10;if (Emotion &lt; 2) {&amp;#10;    startVal = eval(&quot;startVal_&quot; + Emot[Emotion]);&amp;#10;    Stim = Stimuli[startVal][0];&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="Emotion=Emotion+1&amp;#10;trial=0&amp;#10;trial_G=0&amp;#10;#F_trial=0&amp;#10;#M_trial=0&amp;#10;&amp;#10;Intensity=[]&amp;#10;&amp;#10;#F_Intensity=[]&amp;#10;#M_Intensity=[]&amp;#10;&amp;#10;Reverse=0&amp;#10;step=step_sizes[0]&amp;#10;&amp;#10;#F_Reverse=0&amp;#10;#M_Reverse=0&amp;#10;&amp;#10;corrAns=[]&amp;#10;&amp;#10;#F_corrAns=[]&amp;#10;#M_corrAns=[]&amp;#10;&amp;#10;Correctness=[]&amp;#10;&amp;#10;#F_Correctness=[]&amp;#10;#M_Correctness=[]&amp;#10;&amp;#10;Correctness_Int=[]&amp;#10;&amp;#10;#F_Correctness_Int=[]&amp;#10;#M_Correctness_Int=[]&amp;#10;&amp;#10;&amp;#10;random.shuffle(Gender)&amp;#10;#print(&quot;Gender &quot;, Gender)&amp;#10;&amp;#10;if Emotion &lt; 2:&amp;#10;    startVal=eval('startVal_'+Emot[Emotion])&amp;#10;    Stim=Stimuli[startVal][0]&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Both" valType="str"/>
        <Param name="Each Frame" updates="constant" val="if Emotion == 2:&amp;#10;    continueRoutine = False" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="if (Emotion === 2) {&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="Brk_cd" valType="code"/>
      </CodeComponent>
      <TextComponent name="Brk_text">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.035" valType="code"/>
        <Param name="name" updates="None" val="Brk_text" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Take a short break...&amp;#10;&amp;#10;When you are ready to continue, press Space..." valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Brk_key_resp">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Brk_key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Sti">
      <ImageComponent name="Stimulus">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$'Stimuli/'+Stim" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="Stimulus" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.0" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <TextComponent name="empty_Stim">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.03" valType="code"/>
        <Param name="name" updates="None" val="empty_Stim" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.2" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="C">
      <SliderComponent name="sliderConf">
        <Param name="color" updates="constant" val="Black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="False" valType="bool"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="granularity" updates="constant" val="1" valType="code"/>
        <Param name="labels" updates="constant" val="('Unsure','Somewhat sure','Fairly sure','Very sure')" valType="list"/>
        <Param name="name" updates="None" val="sliderConf" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1.0, 0.03)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.2" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="3" valType="code"/>
        <Param name="storeHistory" updates="constant" val="False" valType="bool"/>
        <Param name="storeRating" updates="constant" val="True" valType="bool"/>
        <Param name="storeRatingTime" updates="constant" val="True" valType="bool"/>
        <Param name="styles" updates="constant" val="['rating']" valType="fixedList"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="ticks" updates="constant" val="(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100)" valType="list"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </SliderComponent>
      <CodeComponent name="cd_sliderConf">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="let theseKeys = psychoJS.eventManager.getKeys({keyList:['space']});&amp;#10;&amp;#10;if (theseKeys.length &gt; 0) { &amp;#10;    if (sliderConf.getRating() === undefined) {&amp;#10;        continueRoutine = true;&amp;#10;    } else if (sliderConf.getRating() !== undefined) {&amp;#10;        continueRoutine = false;&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;//if (sliderConf.getRating() === undefined) {&amp;#10;//    continueRouting = true;&amp;#10;//}" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="cd_sliderConf" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="key_sliderConf">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="key_sliderConf" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.2" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="3" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="sliderConf_Input">
        <Param name="color" updates="constant" val="red" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="sliderConf_Input" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -0.15)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="3.2" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every frame" val="$sliderConf.getRating()" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="sliderConf_Inp_txt">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.03" valType="code"/>
        <Param name="name" updates="None" val="sliderConf_Inp_txt" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -0.3)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.2" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="3" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Respond using the slider, then press Space to continue..." valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <CodeComponent name="cd_Conf">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Both" valType="str"/>
        <Param name="Each Frame" updates="constant" val="if key_resp.keys != 'left' and key_resp.keys != 'right':&amp;#10;    continueRoutine=False " valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="if ((key_resp.keys !== &quot;left&quot;) &amp;&amp; (key_resp.keys !== &quot;right&quot;)) {&amp;#10;    continueRoutine = false;&amp;#10;}" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="psychoJS.experiment.addData(&quot;Intensity&quot;, Stimuli[startVal][2]);&amp;#10;Intensity.push([Stimuli[startVal][2], Stimuli[startVal][1]]);&amp;#10;&amp;#10;if ((key_resp.keys !== &quot;left&quot;) &amp;&amp; (key_resp.keys !== &quot;right&quot;)) {&amp;#10;    corrAns.push('NA');&amp;#10;} else if ((key_resp.keys === &quot;left&quot;) || (key_resp.keys === &quot;right&quot;)) {&amp;#10;    if ((key_resp.keys === &quot;left&quot;) &amp;&amp; (Stimuli[startVal][1] == 'Angry')) {&amp;#10;        corrAns.push(1);&amp;#10;        Correctness.push(1);&amp;#10;        Correctness_Int.push(Intensity[Intensity.length-1][1]);&amp;#10;    } else if ((key_resp.keys === &quot;left&quot;) &amp;&amp; (Stimuli[startVal][1] == 'Happy')) {&amp;#10;        corrAns.push(0);&amp;#10;        Correctness.push(0);&amp;#10;        Correctness_Int.push(Intensity[Intensity.length-1][1]);&amp;#10;    } else if ((key_resp.keys === &quot;right&quot;) &amp;&amp; (Stimuli[startVal][1] == 'Happy')) {&amp;#10;        corrAns.push(1);&amp;#10;        Correctness.push(1);&amp;#10;        Correctness_Int.push(Intensity[Intensity.length-1][1]);&amp;#10;    } else if ((key_resp.keys === &quot;right&quot;) &amp;&amp; (Stimuli[startVal][1] == 'Angry')) {&amp;#10;        corrAns.push(0);&amp;#10;        Correctness.push(0);&amp;#10;        Correctness_Int.push(Intensity[Intensity.length-1][1]);&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;&amp;#10;if (Intensity[Intensity.length-1][1]=='Angry') {&amp;#10;    if (trial &gt; 0) {&amp;#10;        if ((corrAns[corrAns.length-1] !== 'NA') &amp;&amp; (Correctness.length &gt; 1)) {&amp;#10;            if ((Correctness[Correctness.length-1]===0) &amp;&amp; (Correctness[Correctness.length-2]===1) &amp;&amp; (Correctness_Int[Correctness_Int.length-2] != 'Happy')) {&amp;#10;                Reverse=Reverse+1;&amp;#10;            } else if ((Correctness[Correctness.length-1]===1) &amp;&amp; (Correctness[Correctness.length-2]===0)) {&amp;#10;                Reverse=Reverse+1;&amp;#10;            } else if ((Correctness[Correctness.length-1]===1) &amp;&amp; (Correctness_Int[Correctness_Int.length-2]=='Happy')) {&amp;#10;                Reverse=Reverse+1;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;} else if (Intensity[Intensity.length-1][1]=='Happy') {&amp;#10;    if (trial &gt; 0) {&amp;#10;        if ((corrAns[corrAns.length-1] !== 'NA') &amp;&amp; (Correctness.length &gt; 1)) {&amp;#10;            if ((Correctness[Correctness.length-1]===1) &amp;&amp; (Correctness[Correctness.length-2]===0)) {&amp;#10;                Reverse=Reverse+1;&amp;#10;            } else if ((Correctness[Correctness.length-1]===1) &amp;&amp; (Correctness_Int[Correctness_Int.length-2]=='Angry')) {&amp;#10;                Reverse=Reverse+1;&amp;#10;            } else if ((Correctness[Correctness.length-1]===0) &amp;&amp; (Correctness[Correctness.length-2]===1) &amp;&amp; (Correctness_Int[Correctness_Int.length-2] != 'Angry')) {&amp;#10;                Reverse=Reverse+1;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;console.log('step before..  ',step);&amp;#10;if (Reverse &lt;= 5) {&amp;#10;    step=step_sizes[Reverse];&amp;#10;} else {&amp;#10;    step=step_sizes[step_sizes.length-1];&amp;#10;}&amp;#10;console.log('step after..  ',step);&amp;#10;&amp;#10;console.log(&quot;before startVal..  &quot;,startVal);&amp;#10;&amp;#10;if ((key_resp.keys === &quot;left&quot;) || (key_resp.keys === &quot;right&quot;)) {&amp;#10;    if (corrAns[corrAns.length-1] === 1) {&amp;#10;        if (Stimuli[startVal][1] == 'Angry') {&amp;#10;            startVal = startVal - step;&amp;#10;        } else if (Stimuli[startVal][1] == 'Happy') {&amp;#10;            startVal = startVal + step;&amp;#10;        }&amp;#10;    } else if (corrAns[corrAns.length-1] === 0) {&amp;#10;        if (Stimuli[startVal][1] == 'Angry') {&amp;#10;            if ((startVal + step) &gt; 199) {&amp;#10;                startVal = 199;&amp;#10;            } else {&amp;#10;                startVal = startVal + step;&amp;#10;            }&amp;#10;        } else if (Stimuli[startVal][1] == 'Happy') {&amp;#10;            if ((startVal - step) &lt; 0) {&amp;#10;                startVal = 0;&amp;#10;            } else {&amp;#10;                startVal = startVal - step;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;console.log(&quot;after startVal..  &quot;,startVal);&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="thisExp.addData('Intensity', Stimuli[startVal][2])&amp;#10;Intensity.append([Stimuli[startVal][2], Stimuli[startVal][1]]) # Intensity, Emotion category&amp;#10;#print(&quot;Stimuli[startVal][2]..  &quot;, Stimuli[startVal][2])&amp;#10;#print(&quot;Intensity..  &quot;, Intensity)&amp;#10;&amp;#10;if key_resp.keys != 'left' and key_resp.keys != 'right':&amp;#10;    corrAns.append('NA')&amp;#10;elif key_resp.keys == 'left' or key_resp.keys == 'right':&amp;#10;    if key_resp.keys=='left' and Stimuli[startVal][1]=='Angry':&amp;#10;        corrAns.append(1)&amp;#10;        Correctness.append(1)&amp;#10;        Correctness_Int.append(Intensity[-1][1])&amp;#10;    elif key_resp.keys=='left' and Stimuli[startVal][1]=='Happy':&amp;#10;        corrAns.append(0)&amp;#10;        Correctness.append(0)&amp;#10;        Correctness_Int.append(Intensity[-1][1])   # Correctness_Int.append(Intensity[trial][1]); changed all these&amp;#10;    elif key_resp.keys=='right' and Stimuli[startVal][1]=='Happy':&amp;#10;        corrAns.append(1)&amp;#10;        Correctness.append(1)&amp;#10;        Correctness_Int.append(Intensity[-1][1])&amp;#10;    elif key_resp.keys=='right' and Stimuli[startVal][1]=='Angry':&amp;#10;        corrAns.append(0)&amp;#10;        Correctness.append(0)&amp;#10;        Correctness_Int.append(Intensity[-1][1])&amp;#10;&amp;#10;#print(&quot;Correctness..  &quot;, Correctness)&amp;#10;#print(&quot;Correctness_Int..  &quot;, Correctness_Int)&amp;#10;&amp;#10;#if len(Correctness) &gt; 2 and len(Correctness_Int)&gt;2:&amp;#10;#    print(&quot;Correctness[-1]..  &quot;,Correctness[-1])&amp;#10;#    print(&quot;Correctness[-2]..  &quot;,Correctness[-2])&amp;#10;#    print(&quot;Correctness_Int[-2]..  &quot;,Correctness_Int[-2])&amp;#10;#    print(&quot;corrAns[-1]..  &quot;,corrAns[-1])&amp;#10;#    print(&quot;len(Correctness)..  &quot;,len(Correctness))&amp;#10;&amp;#10;&amp;#10;if Intensity[-1][1]=='Angry':      # if Emotion category is Angry; Intensity[trial_G][1]==0: changed these&amp;#10;    if trial &gt; 0:&amp;#10;        if (corrAns[-1] != 'NA' and len(Correctness) &gt; 1):&amp;#10;            #print('condition met')&amp;#10;            if (Correctness[-1]==0 and Correctness[-2]==1 and Correctness_Int[-2] != 'Happy'):&amp;#10;                #print(&quot;Correctness[-1]..  &quot;,Correctness[-1])&amp;#10;                #print(&quot;Correctness[-2]..  &quot;,Correctness[-2])&amp;#10;                #print(&quot;Correctness_Int[-2]..  &quot;, Correctness_Int[-2])&amp;#10;                #print(&quot;1_Reverse before..  &quot;,Reverse)&amp;#10;                Reverse=Reverse+1&amp;#10;                #print(&quot;1_Reverse after..  &quot;,Reverse)&amp;#10;            elif Correctness[-1]==1 and Correctness[-2]==0:&amp;#10;                #print(&quot;2_Reverse before..  &quot;,Reverse)&amp;#10;                Reverse=Reverse+1&amp;#10;                #print(&quot;2_Reverse after..  &quot;,Reverse)&amp;#10;            elif Correctness[-1]==1 and Correctness_Int[-2]=='Happy':&amp;#10;                #print(&quot;3_Reverse before..  &quot;,Reverse)&amp;#10;                Reverse=Reverse+1&amp;#10;                #print(&quot;3_Reverse after..  &quot;,Reverse)&amp;#10;elif Intensity[-1][1]=='Happy':        # if Emotion category is Happy&amp;#10;    if trial &gt; 0:&amp;#10;        if corrAns[-1] != 'NA' and len(Correctness) &gt; 1:&amp;#10;            if Correctness[-1]==1 and Correctness[-2]==0:&amp;#10;                #print(&quot;4_Reverse before..  &quot;,Reverse)&amp;#10;                Reverse=Reverse+1&amp;#10;                #print(&quot;4_Reverse after..  &quot;,Reverse)&amp;#10;            elif Correctness[-1]==1 and Correctness_Int[-2]=='Angry':&amp;#10;                #print(&quot;5_Reverse before..  &quot;,Reverse)&amp;#10;                Reverse=Reverse+1&amp;#10;                #print(&quot;5_Reverse after..  &quot;,Reverse)&amp;#10;            elif (Correctness[-1]==0 and Correctness[-2]==1 and Correctness_Int[-2] != 'Angry'):&amp;#10;                #print(&quot;6_Reverse before..  &quot;,Reverse)&amp;#10;                Reverse=Reverse+1&amp;#10;                #print(&quot;6_Reverse after..  &quot;,Reverse)&amp;#10;&amp;#10;#print(&quot;step before..  &quot;, step)&amp;#10;if Reverse &lt;= 5:&amp;#10;    step=step_sizes[Reverse]&amp;#10;else:&amp;#10;    step=step_sizes[-1]&amp;#10;#print(&quot;step after..  &quot;, step)&amp;#10;&amp;#10;&amp;#10;print(&quot;before startVal..  &quot;,startVal)&amp;#10;&amp;#10;if key_resp.keys == 'left' or key_resp.keys == 'right':&amp;#10;    if corrAns[-1]==1:&amp;#10;        if Stimuli[startVal][1] == 'Angry':&amp;#10;            startVal=startVal-step&amp;#10;        elif Stimuli[startVal][1] == 'Happy':&amp;#10;            startVal=startVal+step&amp;#10;    elif corrAns[-1]==0:&amp;#10;        if Stimuli[startVal][1]=='Angry':&amp;#10;            if (startVal + step) &gt; 199:&amp;#10;                startVal = 199&amp;#10;            else:&amp;#10;                startVal = startVal + step&amp;#10;        elif Stimuli[startVal][1]=='Happy':&amp;#10;           # print(&quot;Conf, End Rout, Stimuli[startVal][1]  &quot;, Stimuli[startVal][1])&amp;#10;            if (startVal - step) &lt; 0:&amp;#10;                startVal = 0&amp;#10;            else:&amp;#10;                startVal=startVal-step&amp;#10;print(&quot;after startVal..  &quot;,startVal)&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="cd_Conf" valType="code"/>
      </CodeComponent>
      <TextComponent name="Confidence">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.03" valType="code"/>
        <Param name="name" updates="None" val="Confidence" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0.2)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.2" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="3.0" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="How confident are you in your judgement?" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <PolygonComponent name="sliderConf_shape">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="sliderConf_shape" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -0.16)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(0.3, 0.15)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.2" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="Start"/>
    <LoopInitiator loopType="TrialHandler" name="trials_2">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="2" valType="code"/>
      <Param name="name" updates="None" val="trials_2" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <LoopInitiator loopType="TrialHandler" name="trials_1">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="30" valType="code"/>
      <Param name="name" updates="None" val="trials_1" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Sti"/>
    <Routine name="Ans"/>
    <Routine name="C"/>
    <Routine name="late"/>
    <Routine name="_1_5"/>
    <LoopTerminator name="trials_1"/>
    <Routine name="Brk"/>
    <LoopTerminator name="trials_2"/>
    <Routine name="End"/>
  </Flow>
</PsychoPy2experiment>
